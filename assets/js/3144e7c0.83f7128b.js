"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6014],{5416:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=n(4848),o=n(8453);const a={id:"create-basic-pdf",title:"Creating a Basic PDF",description:"Learn how to create a basic PDF document with TomoPDF.",keywords:["TomoPDF","Basic PDF",".NET PDF library"]},s="Creating a Basic PDF",c={id:"create-basic-pdf",title:"Creating a Basic PDF",description:"Learn how to create a basic PDF document with TomoPDF.",source:"@site/docs/create-basic-pdf.md",sourceDirName:".",slug:"/create-basic-pdf",permalink:"/Tomo.Pdf.Doc/create-basic-pdf",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"create-basic-pdf",title:"Creating a Basic PDF",description:"Learn how to create a basic PDF document with TomoPDF.",keywords:["TomoPDF","Basic PDF",".NET PDF library"]},sidebar:"docs",previous:{title:"Introduction",permalink:"/Tomo.Pdf.Doc/intro"},next:{title:"Creating Your Own Layout with Tomo.PDF",permalink:"/Tomo.Pdf.Doc/create-custom-layout"}},r={},d=[{value:"Code Example",id:"code-example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"creating-a-basic-pdf",children:"Creating a Basic PDF"}),"\n",(0,i.jsx)(t.p,{children:"In this example, we will create a simple PDF document with some text using TomoPDF."}),"\n",(0,i.jsx)(t.h2,{id:"code-example",children:"Code Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'using System;\nusing System.IO;\nusing Tomo.Core;\nusing Tomo.Pdf;\n\nnamespace TomoPdfSamples.Samples\n{\n    public class CreateBasicPdf\n    {\n        public void Run()\n        {\n            string filePath = "BasicSample.pdf";\n\n            // Check if the file already exists and delete it if it does\n            if (File.Exists(filePath))\n            {\n                File.Delete(filePath);\n                Console.WriteLine($"Existing file {filePath} deleted.");\n            }\n\n            // Create a new PDF document builder\n            var builder = new TomoPdfBuilder();\n\n            // Add some text to the document\n            builder.AddElement(new TomoText("Hello, PDF World!", 50, 50, textSize: 14));\n\n            // Save the document to a file\n            builder.Build(filePath);\n\n            // Output success message\n            Console.WriteLine($"Basic PDF sample created successfully and saved to {filePath}.");\n        }\n    }\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(6540);const o={},a=i.createContext(o);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);