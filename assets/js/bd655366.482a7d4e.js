"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2790],{1337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var i=t(4848),o=t(8453);const a={title:"Creating Your Own Layout with Tomo.PDF",description:"Learn how to create a custom PDF layout using the Tomo.PDF library. This guide covers adding rectangles, images, lines, and text to personalize your PDF documents.",keywords:["Tomo.PDF","PDF creation","custom layout","PDF library",".NET PDF","PDF document"],author:"Tomo Files",date:new Date("2024-05-31T00:00:00.000Z")},l="Creating Your Own Layout with Tomo.PDF",d={id:"create-custom-layout",title:"Creating Your Own Layout with Tomo.PDF",description:"Learn how to create a custom PDF layout using the Tomo.PDF library. This guide covers adding rectangles, images, lines, and text to personalize your PDF documents.",source:"@site/docs/create-custom-layout.md",sourceDirName:".",slug:"/create-custom-layout",permalink:"/Tomo.Pdf.Doc/create-custom-layout",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Creating Your Own Layout with Tomo.PDF",description:"Learn how to create a custom PDF layout using the Tomo.PDF library. This guide covers adding rectangles, images, lines, and text to personalize your PDF documents.",keywords:["Tomo.PDF","PDF creation","custom layout","PDF library",".NET PDF","PDF document"],author:"Tomo Files",date:"2024-05-31T00:00:00.000Z"}},r={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Step-by-Step Guide",id:"step-by-step-guide",level:2},{value:"1. Setup and Initialization",id:"1-setup-and-initialization",level:3},{value:"2. Creating the PDF Builder",id:"2-creating-the-pdf-builder",level:3},{value:"3. Adding a Rectangle",id:"3-adding-a-rectangle",level:3},{value:"4. Inserting an Image",id:"4-inserting-an-image",level:3},{value:"5. Drawing a Line",id:"5-drawing-a-line",level:3},{value:"6. Adding Text",id:"6-adding-text",level:3},{value:"7. Saving the PDF",id:"7-saving-the-pdf",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"creating-your-own-layout-with-tomopdf",children:"Creating Your Own Layout with Tomo.PDF"}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"This guide will walk you through creating a custom PDF layout using the Tomo.PDF library. We will cover adding basic elements such as rectangles, images, lines, and text. By the end of this tutorial, you will understand how to leverage Tomo.PDF to create a personalized PDF document."}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-guide",children:"Step-by-Step Guide"}),"\n",(0,i.jsx)(n.h3,{id:"1-setup-and-initialization",children:"1. Setup and Initialization"}),"\n",(0,i.jsx)(n.p,{children:"Start by defining the output file path and ensure any existing file is deleted to avoid conflicts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'string filePath = "BasicLayout.pdf";\n\nif (File.Exists(filePath))\n{\n    File.Delete(filePath);\n    Console.WriteLine($"Existing file {filePath} deleted.");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-creating-the-pdf-builder",children:"2. Creating the PDF Builder"}),"\n",(0,i.jsxs)(n.p,{children:["Initialize the ",(0,i.jsx)(n.code,{children:"TomoPdfBuilder"})," which will be used to build the PDF document:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"var builder = new TomoPdfBuilder();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-adding-a-rectangle",children:"3. Adding a Rectangle"}),"\n",(0,i.jsx)(n.p,{children:"To add a rectangle to your PDF, specify its position and dimensions, then add it to the builder:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int rectX = 50;\nint rectY = 300;\nint rectWidth = 500;\nint rectHeight = 200;\n\nbuilder.AddElement(new TomoRectangle(rectX, rectY, rectWidth, rectHeight, new TomoColor(0, 0, 0)));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-inserting-an-image",children:"4. Inserting an Image"}),"\n",(0,i.jsx)(n.p,{children:"Next, you can add an image to the PDF. Ensure the image file exists, then specify its position and dimensions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'int logoWidth = 195;\nint logoHeight = 55;\nint logoX = rectX + rectWidth / 2 + (rectWidth / 2 - logoWidth) / 2;\nint logoY = rectY + (rectHeight - logoHeight) / 2;\n\nvar logoPath = Path.Combine("Images", "tomologo.png");\nif (File.Exists(logoPath))\n{\n    var logo = new TomoImage(logoPath, logoX, logoY, logoWidth, logoHeight);\n    builder.AddElement(logo);\n}\nelse\n{\n    Console.WriteLine($"Logo file {logoPath} not found.");\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-drawing-a-line",children:"5. Drawing a Line"}),"\n",(0,i.jsx)(n.p,{children:"To draw a vertical line, specify the start and end points and add the line to the builder:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"int lineX = rectX + rectWidth / 2;\nint lineY1 = rectY + 20;\nint lineY2 = rectY + rectHeight - 20;\nbuilder.AddElement(new TomoLine(lineX, lineY1, lineX, lineY2, new TomoColor(0, 0, 0)));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6-adding-text",children:"6. Adding Text"}),"\n",(0,i.jsx)(n.p,{children:"Finally, add text elements to your PDF by specifying the text content, position, and size:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'int textX = rectX + 20;\nint textY = rectY + rectHeight / 2 + 10;\nbuilder.AddElement(new TomoText("Tomo.PDF", textX, textY, textSize: 18));\nbuilder.AddElement(new TomoText("By Tomo Files", textX, textY + 20, textSize: 14));\n'})}),"\n",(0,i.jsx)(n.h3,{id:"7-saving-the-pdf",children:"7. Saving the PDF"}),"\n",(0,i.jsx)(n.p,{children:"Once all elements are added, build and save the PDF document:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'builder.Build(filePath);\n\n// Output success message\nConsole.WriteLine($"Basic PDF Layout sample created successfully and saved to {filePath}.");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"By following these steps, you can create a customized PDF layout using Tomo.PDF. This example demonstrates the basic process of adding different elements, giving you the foundation to build more complex layouts as needed."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var i=t(6540);const o={},a=i.createContext(o);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);